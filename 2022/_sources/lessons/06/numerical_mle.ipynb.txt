{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numerical maximum likelihood estimation\n",
    "\n",
    "[Dataset download](https://s3.amazonaws.com/bebi103.caltech.edu/data/singer_transcript_counts.csv)\n",
    "\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1002\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  const force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  const JS_MIME_TYPE = 'application/javascript';\n",
       "  const HTML_MIME_TYPE = 'text/html';\n",
       "  const EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  const CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    const script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    const cell = handle.cell;\n",
       "\n",
       "    const id = cell.output_area._bokeh_element_id;\n",
       "    const server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      const cmd_clean = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd_clean, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            const id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      const cmd_destroy = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd_destroy);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    const output_area = handle.output_area;\n",
       "    const output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!Object.prototype.hasOwnProperty.call(output.data, EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    const toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      const bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      const script_attrs = bk_div.children[0].attributes;\n",
       "      for (let i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      const toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      const props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    const events = require('base/js/events');\n",
       "    const OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  const NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    const el = document.getElementById(\"1002\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error(url) {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (let i = 0; i < css_urls.length; i++) {\n",
       "      const url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error.bind(null, url);\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    for (let i = 0; i < js_urls.length; i++) {\n",
       "      const url = js_urls[i];\n",
       "      const element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error.bind(null, url);\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  const js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-mathjax-2.4.2.min.js\"];\n",
       "  const css_urls = [];\n",
       "  \n",
       "\n",
       "  const inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (let i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      const cell = $(document.getElementById(\"1002\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  const force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  const NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    const el = document.getElementById(\"1002\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error(url) {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  const js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.4.2.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-mathjax-2.4.2.min.js\"];\n  const css_urls = [];\n  \n\n  const inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (let i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      const cell = $(document.getElementById(\"1002\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import itertools\n",
    "import warnings\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy.optimize\n",
    "import scipy.stats as st\n",
    "\n",
    "import iqplot\n",
    "\n",
    "import bokeh.io\n",
    "import bokeh.plotting\n",
    "bokeh.io.output_notebook()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "As discussed in the previous lesson, maximum likelihood estimates for parameters may sometimes be computed analytically, but often cannot. In those cases, we need to resort to numerical methods. In this tutorial, we demonstrate some numerical methods to perform maximum likelihood estimates of parameters form a Negative Binomial distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The data set\n",
    "\n",
    "The data come from the [Elowitz lab](http://elowitz.caltech.edu/), published in Singer et al., Dynamic Heterogeneity and DNA Methylation in Embryonic Stem Cells, *Molec. Cell*, **55**, 319-331, 2014, available [here](https://doi.org/10.1016/j.molcel.2014.06.029).\n",
    "\n",
    "In this paper, the authors investigated cell populations of embryonic stem cells using RNA single molecule fluorescence in situ hybridization (smFISH), a technique that enables them to count the number of mRNA transcripts in a cell for a given gene. They were able to measure four different genes in the same cells. So, for one experiment, they get the counts of four different genes in a collection of cells.  \n",
    "\n",
    "The authors focused on genes that code for pluripotency-associated regulators to study cell differentiation.  Indeed, differing gene expression levels are a hallmark of differentiated cells. The authors do not just look at counts in a given cell at a given time. The *temporal* nature of gene expression is also important.  While the authors do not directly look at temporal data using smFISH (since the technique requires fixing the cells), they did look at time lapse fluorescence movies of other regulators. We will not focus on these experiments here, but will discuss how the distribution of mRNA counts acquired via smFISH can serve to provide some insight about the dynamics of gene expression.\n",
    "\n",
    "The data set we are analyzing now comes from an experiment where smFISH was performed in 279 cells for the genes *rex1*, *rest*, *nanog*, and *prdm14*.  The data set may be downloaded at [https://s3.amazonaws.com/bebi103.caltech.edu/data/singer_transcript_counts.csv](https://s3.amazonaws.com/bebi103.caltech.edu/data/singer_transcript_counts.csv)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory data analysis\n",
    "\n",
    "We first load in the data set and generate ECDFs for the mRNA counts for each of the four genes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rex1</th>\n",
       "      <th>Rest</th>\n",
       "      <th>Nanog</th>\n",
       "      <th>Prdm14</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11</td>\n",
       "      <td>34</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>172</td>\n",
       "      <td>91</td>\n",
       "      <td>33</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>261</td>\n",
       "      <td>70</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>178</td>\n",
       "      <td>54</td>\n",
       "      <td>88</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>129</td>\n",
       "      <td>54</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rex1  Rest  Nanog  Prdm14\n",
       "0    11    34     39       0\n",
       "1   172    91     33       5\n",
       "2   261    70     68       0\n",
       "3   178    54     88       1\n",
       "4   129    54     41       0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load DataFrame\n",
    "df = pd.read_csv('../data/singer_transcript_counts.csv', comment='#')\n",
    "\n",
    "# Take a look\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each of the 279 rows has the mRNA counts for each of the four genes. There may be multiple cell types present, and we do now know how many there are. Our aim here is not to find how many cell types there are, but to demonstrate how MLE works. Nonetheless, we should have some idea of the properties of the data set we are exploring. We can start by plotting ECDFs for each of the four genes. It is useful to have the gene names around for iteration here, and throughout the lesson."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"bb97d471-c15a-4eb7-94b4-5c8712c9a585\" data-root-id=\"1210\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  const docs_json = {\"616a265d-1d4a-4277-99f0-8440d715d6cd\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"children\":[{\"id\":\"1209\"},{\"id\":\"1207\"}]},\"id\":\"1210\",\"type\":\"Column\"},{\"attributes\":{},\"id\":\"1181\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1102\",\"type\":\"PanTool\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1076\"},\"glyph\":{\"id\":\"1078\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1080\"},\"nonselection_glyph\":{\"id\":\"1079\"},\"view\":{\"id\":\"1082\"}},\"id\":\"1081\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"overlay\":{\"id\":\"1108\"}},\"id\":\"1104\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1182\",\"type\":\"Selection\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.1},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Nanog\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1039\",\"type\":\"Circle\"},{\"attributes\":{\"data\":{\"Nanog\":[39,33,68,88,41,103,27,15,153,127,73,5,64,104,202,216,51,293,4,1,5,143,77,27,156,0,100,101,33,120,101,57,97,121,228,79,48,0,34,107,110,408,231,153,138,10,137,69,174,61,32,84,67,141,24,94,246,80,69,11,20,10,13,44,68,251,127,74,156,44,61,33,39,175,128,24,67,274,78,49,4,143,193,82,10,176,86,107,130,149,31,40,177,37,145,1,86,113,115,139,68,83,64,94,117,26,108,120,84,2,144,62,55,12,21,39,33,14,103,78,82,46,47,79,1,6,24,116,104,63,59,132,125,153,85,104,52,140,128,22,35,2,162,236,140,14,3,132,120,30,84,200,74,154,81,77,59,88,80,10,175,19,124,60,87,194,29,119,67,8,38,94,28,22,66,6,90,77,92,118,171,29,32,11,77,37,198,134,14,227,190,40,1,50,65,19,64,154,65,25,71,129,114,123,156,8,132,136,80,162,53,87,72,64,19,134,10,65,109,96,105,21,20,116,239,0,83,263,67,0,29,66,191,30,196,49,186,181,104,127,66,11,19,155,252,160,38,41,6,195,55,24,94,11,66,73,263,168,128,18,58,72,105,118,23,212,76,32,29,104,2,76,148,187,141,3,8,74,104],\"__ECDF\":{\"__ndarray__\":\"r2dJ0OtZ0j+5OkBWrg7QPxzHcRzHcdw/B8jK1QGy4j8q/k2Nin/TP9q+UJi2L+Q/J5poookmyj8avEVsBm/BP9daa6211uo/vvfee++95z9IHnnkkUfeP7JydYCsXK0/rANk5eoA2T/AqVHxb2rkP0geeeSRR+4/LQl6PUuC7j8gK1cHyMrVP42Kf1Oj4u8/XMRm8BaxqT+vZ0nQ61mSP93JfEh3Mq8/J5poookm6j+Nin9To+LfP/FvalT8m8o/hxtuuOGG6z+ycnWArFxtP4Jez5Kg1+M/9dNPP/304z+fJUGvZ0nQP5vBW8Rm8OY/aEnQ61kS5D+bwVvEZvDWPxDpTuZDuuM/8yHdyXxI5z8S9HqWBL3uP/eFwrR9oeA/i39To+Lf1D+ycnWArFx9P0/mQ7qT+dA/VVVVVVVV5T8gK1cHyMrlPwAAAAAAAPA/hWn7QmHa7j9J0OtZEvTqP3bZZZddduk/BhZYYIEFtj8EZOXqAFnpP82HdCfzId0/HMdxHMdx7D8WWGCBBRbYPxL0epYEvc4/chzHcRzH4T+HG2644YbbP0GvZ0nQ6+k/Zpdddtllxz/SncyHdCfjP93JfEh3Mu8/3HDDDTfc4D+ycnWArFzdP/FvalT8m7o/2r5QmLYvxD+bwVvEZvC2P93JfEh3Mr8/9dNPP/300z8CsnJ1gKzcP1A//fTTT+8/MW1fKEzb5z8S9HqWBL3eP/qQ7mQ+pOs/2r5QmLYv1D/7QmHavlDYP4QQQgghhNA/lVJKKaWU0j+PPPLII4/sPxZYYIEFFug/MW1fKEzbxz9sBm8Rm8HbPxsV/6ZGxe8/EZvBW8Rm4D9walT8mxrVP4cbbrjhhqs/mQ/pTuZD6j+XXXbZZZftP6dGxb+pUeE/MW1fKEzbtz91J/Mh3cnsPz3yyCOPPOI/yMrVAbJy5T/hLWIzeIvoP2Tl6gBZueo/SB555JFHzj9fKEzbFwrTP+ecc8455+w/GrxFbAZv0T9/+umnn37qPwYWWGCBBZY/r2dJ0OtZ4j+ToNezJOjlP3iL2AzeIuY/6U7mQ7qT6T/nnHPOOefcP4wxxhhjjOE/ke5kPqQ72T9FE0000UTjP9DrWRL0euY/XMRm8BaxyT87QFauDpDlPw433HDDDec/5JFHHnnk4T+EEEIIIYSgPwyFaftCYeo/4S1iM3iL2D/Q61kS9HrWP0geeeSRR74/cGpU/JsaxT96PUuCXs/SP2r7QmHavtA/uTpAVq4OwD9NNNFEE03kP4QQQgghhOA/GrxFbAZv4T/AqVHxb2rUP6WUUkoppdQ/avtCYdq+4D9cxGbwFrGZP4QQQgghhLA/+0Jh2r5QyD/rAFm5OkDmPzIf0p3Mh+Q/xhhjjDHG2D9ml1122WXXP1Oj4t/UqOg/S4Jez5Kg5z+8RWwGbxHrP8p8SHcyH+I/pZRSSiml5D8GFlhggQXWP1zEZvAWsek/ic3gLWIz6D8GFlhggQXGPzTRRBNNNNE/r2dJ0OtZoj9S8W9qVPzrP/jee++99+4/zjnnnHPO6T+EEEIIIYTAPwYWWGCBBaY/xhhjjDHG6D+ArFwdICvnP7JydYCsXM0/VwfIytUB4j/VqPg3NSruP/jee++9994/L7vssssu6z800UQTTTThP7k6QFauDuA/S4Jez5Kg1z96PUuCXs/iP0/mQ7qT+eA/xhhjjDHGuD8CsnJ1gKzsP69nSdDrWcI/2QzeIjaD5z8xbV8oTNvXPyLdyXxId+I/CtP2hcK07T+HG2644YbLPyhM2xcK0+Y/UvFvalT82z9FE0000USzP+SRRx555NE/uIjN4C1i4z+8RWwGbxHLP9DrWRL0esY/8W9qVPyb2j8avEVsBm+xP+2yyy677OI/LLDAAgss4D9fKEzbFwrjP0Nh2r5QmOY/qlHxb2pU7D9S8W9qVPzLP93JfEh3Ms8/hxtuuOGGuz+fJUGvZ0ngP/+mRsW/qdE/YjN4i9gM7j+sA2Tl6gDpP0/mQ7qT+cA/oH766aef7j+ycnWArFztP0UTTTTRRNM/snJ1gKxcnT87QFauDpDVP0GvZ0nQ69k/ej1Lgl7Pwj922WWXXXbZP6EwbV8oTOs/J5poookm2j+R7mQ+pDvJP5dddtlll90/brjhhhtu6D8GFlhggQXmP2aXXXbZZec/bAZvEZvB6z/avlCYti+0PzmO4ziO4+g/ke5kPqQ76T/CW8Rm8BbhP8Rm8BaxGew/6wBZuTpA1j+VUkoppZTiP31IdzIf0t0/XMRm8Bax2T9FE0000UTDPx555JFHHuk/XMRm8BaxuT8MhWn7QmHaP6211lprreU/nXPOOeec4z9walT8mxrlPztAVq4OkMU/pZRSSimlxD9edtlll13mP2pU/JsaFe8/BhZYYIEFhj//pkbFv6nhPzUq/k2Niu8/N9xwww033D+ycnWArFyNPxzHcRzHccw/11prrbXW2j8l6PUsCXrtP31IdzIf0s0/77333nvv7T9VVVVVVVXVP82HdCfzIe0/WhL0epYE7T8YCtP2hcLkP6Pi39So+Oc/vEVsBm8R2z8cx3Ecx3G8PxDpTuZDusM/FKbtC4Vp6z/DtH2hMG3vP99777333us/ynxIdzIf0j8Q6U7mQ7rTP69nSdDrWbI/fUh3Mh/S7T+21lprrbXWP8YYY4wxxsg/Kv5NjYp/4z+ycnWArFy9P6EwbV8oTNs/LQl6PUuC3j+on3766afvPzfccMMNN+w/+0Jh2r5Q6D/kkUceeeTBP4CsXB0gK9c/YjN4i9gM3j/j39So+DflP7bWWmutteY/m8FbxGbwxj+6k/mQ7mTuP8O0faEwbd8/qJ9++umnzz/nnHPOOefMP4t/U6Pi3+Q/2r5QmLYvpD+on3766affP/FvalT8m+o/P/30008/7T+0JOj1LAnqPzFtXyhM26c/cGpU/JsatT/dyXxIdzLfP/30008//eQ/\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[279]},\"__dummy_catlabelindex\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},\"selected\":{\"id\":\"1171\"},\"selection_policy\":{\"id\":\"1170\"}},\"id\":\"1036\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1107\",\"type\":\"HelpTool\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1036\"},\"glyph\":{\"id\":\"1038\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1040\"},\"nonselection_glyph\":{\"id\":\"1039\"},\"view\":{\"id\":\"1042\"}},\"id\":\"1041\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1036\"}},\"id\":\"1042\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1142\",\"type\":\"PanTool\"},{\"attributes\":{\"toolbars\":[{\"id\":\"1029\"},{\"id\":\"1069\"},{\"id\":\"1109\"},{\"id\":\"1149\"}],\"tools\":[{\"id\":\"1022\"},{\"id\":\"1023\"},{\"id\":\"1024\"},{\"id\":\"1025\"},{\"id\":\"1026\"},{\"id\":\"1027\"},{\"id\":\"1062\"},{\"id\":\"1063\"},{\"id\":\"1064\"},{\"id\":\"1065\"},{\"id\":\"1066\"},{\"id\":\"1067\"},{\"id\":\"1102\"},{\"id\":\"1103\"},{\"id\":\"1104\"},{\"id\":\"1105\"},{\"id\":\"1106\"},{\"id\":\"1107\"},{\"id\":\"1142\"},{\"id\":\"1143\"},{\"id\":\"1144\"},{\"id\":\"1145\"},{\"id\":\"1146\"},{\"id\":\"1147\"}]},\"id\":\"1208\",\"type\":\"ProxyToolbar\"},{\"attributes\":{\"overlay\":{\"id\":\"1148\"}},\"id\":\"1144\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1086\",\"type\":\"DataRange1d\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.2},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.2},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Prdm14\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1080\",\"type\":\"Circle\"},{\"attributes\":{\"bottom_units\":\"screen\",\"coordinates\":null,\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"group\":null,\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1068\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1099\",\"type\":\"BasicTicker\"},{\"attributes\":{\"axis\":{\"id\":\"1098\"},\"coordinates\":null,\"dimension\":1,\"group\":null,\"ticker\":null},\"id\":\"1101\",\"type\":\"Grid\"},{\"attributes\":{\"below\":[{\"id\":\"1054\"}],\"center\":[{\"id\":\"1057\"},{\"id\":\"1061\"}],\"frame_height\":150,\"frame_width\":200,\"left\":[{\"id\":\"1058\"}],\"renderers\":[{\"id\":\"1081\"}],\"title\":{\"id\":\"1044\"},\"toolbar\":{\"id\":\"1069\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1046\"},\"x_scale\":{\"id\":\"1050\"},\"y_range\":{\"id\":\"1048\"},\"y_scale\":{\"id\":\"1052\"}},\"id\":\"1043\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1106\",\"type\":\"ResetTool\"},{\"attributes\":{\"below\":[{\"id\":\"1134\"}],\"center\":[{\"id\":\"1137\"},{\"id\":\"1141\"}],\"frame_height\":150,\"frame_width\":200,\"left\":[{\"id\":\"1138\"}],\"renderers\":[{\"id\":\"1161\"}],\"title\":{\"id\":\"1124\"},\"toolbar\":{\"id\":\"1149\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1126\"},\"x_scale\":{\"id\":\"1130\"},\"y_range\":{\"id\":\"1128\"},\"y_scale\":{\"id\":\"1132\"}},\"id\":\"1123\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"axis\":{\"id\":\"1058\"},\"coordinates\":null,\"dimension\":1,\"group\":null,\"ticker\":null},\"id\":\"1061\",\"type\":\"Grid\"},{\"attributes\":{\"bottom_units\":\"screen\",\"coordinates\":null,\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"group\":null,\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1108\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1105\",\"type\":\"SaveTool\"},{\"attributes\":{\"axis\":{\"id\":\"1054\"},\"coordinates\":null,\"group\":null,\"ticker\":null},\"id\":\"1057\",\"type\":\"Grid\"},{\"attributes\":{\"tools\":[{\"id\":\"1062\"},{\"id\":\"1063\"},{\"id\":\"1064\"},{\"id\":\"1065\"},{\"id\":\"1066\"},{\"id\":\"1067\"}]},\"id\":\"1069\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1139\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1147\",\"type\":\"HelpTool\"},{\"attributes\":{\"toolbar\":{\"id\":\"1208\"},\"toolbar_location\":\"above\"},\"id\":\"1209\",\"type\":\"ToolbarBox\"},{\"attributes\":{},\"id\":\"1059\",\"type\":\"BasicTicker\"},{\"attributes\":{\"overlay\":{\"id\":\"1068\"}},\"id\":\"1064\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1062\",\"type\":\"PanTool\"},{\"attributes\":{\"below\":[{\"id\":\"1014\"}],\"center\":[{\"id\":\"1017\"},{\"id\":\"1021\"}],\"frame_height\":150,\"frame_width\":200,\"left\":[{\"id\":\"1018\"}],\"renderers\":[{\"id\":\"1041\"}],\"title\":{\"id\":\"1004\"},\"toolbar\":{\"id\":\"1029\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1006\"},\"x_scale\":{\"id\":\"1010\"},\"y_range\":{\"id\":\"1008\"},\"y_scale\":{\"id\":\"1012\"}},\"id\":\"1003\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1103\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1065\",\"type\":\"SaveTool\"},{\"attributes\":{\"axis_label\":\"ECDF\",\"coordinates\":null,\"formatter\":{\"id\":\"1176\"},\"group\":null,\"major_label_policy\":{\"id\":\"1177\"},\"ticker\":{\"id\":\"1059\"}},\"id\":\"1058\",\"type\":\"LinearAxis\"},{\"attributes\":{\"coordinates\":null,\"group\":null,\"text\":\"Rex1\"},\"id\":\"1124\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1067\",\"type\":\"HelpTool\"},{\"attributes\":{\"source\":{\"id\":\"1116\"}},\"id\":\"1122\",\"type\":\"CDSView\"},{\"attributes\":{\"tools\":[{\"id\":\"1102\"},{\"id\":\"1103\"},{\"id\":\"1104\"},{\"id\":\"1105\"},{\"id\":\"1106\"},{\"id\":\"1107\"}]},\"id\":\"1109\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1063\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1066\",\"type\":\"ResetTool\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1116\"},\"glyph\":{\"id\":\"1118\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1120\"},\"nonselection_glyph\":{\"id\":\"1119\"},\"view\":{\"id\":\"1122\"}},\"id\":\"1121\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"axis_label\":\"mRNA count\",\"coordinates\":null,\"formatter\":{\"id\":\"1201\"},\"group\":null,\"major_label_policy\":{\"id\":\"1202\"},\"ticker\":{\"id\":\"1135\"}},\"id\":\"1134\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1095\",\"type\":\"BasicTicker\"},{\"attributes\":{\"tools\":[{\"id\":\"1142\"},{\"id\":\"1143\"},{\"id\":\"1144\"},{\"id\":\"1145\"},{\"id\":\"1146\"},{\"id\":\"1147\"}]},\"id\":\"1149\",\"type\":\"Toolbar\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.2},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.2},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Nanog\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1040\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1132\",\"type\":\"LinearScale\"},{\"attributes\":{\"bottom_units\":\"screen\",\"coordinates\":null,\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"group\":null,\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1028\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"axis_label\":\"ECDF\",\"coordinates\":null,\"formatter\":{\"id\":\"1198\"},\"group\":null,\"major_label_policy\":{\"id\":\"1199\"},\"ticker\":{\"id\":\"1139\"}},\"id\":\"1138\",\"type\":\"LinearAxis\"},{\"attributes\":{\"data\":{\"Prdm14\":[0,5,0,1,0,0,0,2,1,3,1,1,3,14,16,11,1,15,0,0,0,1,0,0,7,0,4,6,0,12,4,0,7,17,1,8,2,0,0,1,4,24,31,3,3,0,1,1,5,0,3,1,7,1,5,1,7,1,1,0,0,0,0,3,9,32,3,15,4,4,0,1,6,3,3,1,2,19,8,1,0,11,3,6,0,12,0,12,5,9,2,7,21,0,5,0,1,2,3,1,1,5,0,0,13,0,4,2,3,0,13,27,0,2,1,1,0,0,3,6,5,2,3,7,2,0,0,6,0,0,1,25,12,7,1,6,0,4,3,1,0,1,20,10,7,0,0,0,5,0,12,0,2,1,0,0,7,3,1,0,8,0,15,5,4,6,0,2,1,0,12,4,6,0,3,0,9,8,12,7,13,1,0,1,11,3,11,27,6,32,0,6,0,0,5,0,2,3,2,1,2,2,6,6,1,1,3,0,0,3,4,7,6,3,0,22,0,18,1,5,0,1,1,18,3,0,4,15,3,0,0,0,18,1,0,1,16,12,1,8,5,0,0,17,4,8,0,0,0,8,1,1,10,0,5,0,0,0,15,0,8,5,6,5,1,0,1,0,1,9,0,6,5,19,6,1,4,4,0],\"__ECDF\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[279]},\"__dummy_catlabelindex\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},\"selected\":{\"id\":\"1182\"},\"selection_policy\":{\"id\":\"1181\"}},\"id\":\"1076\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"axis\":{\"id\":\"1138\"},\"coordinates\":null,\"dimension\":1,\"group\":null,\"ticker\":null},\"id\":\"1141\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1146\",\"type\":\"ResetTool\"},{\"attributes\":{\"data\":{\"Rest\":[34,91,70,54,54,68,74,60,96,35,50,51,43,50,74,125,62,130,95,31,67,90,62,39,68,40,65,78,60,94,99,55,69,41,102,65,42,76,114,84,106,182,68,86,63,24,103,96,75,60,70,79,74,74,44,104,97,30,58,17,34,44,28,49,65,246,104,108,91,144,40,80,57,82,85,51,39,98,88,65,13,140,85,76,21,80,60,137,91,70,12,53,65,33,59,59,72,110,138,105,83,104,62,57,110,51,106,92,59,33,108,53,34,94,48,64,93,53,77,83,56,48,88,54,75,46,29,42,79,64,57,92,125,37,44,112,52,125,152,18,34,16,53,72,103,35,75,62,134,83,94,67,84,80,57,80,29,87,130,32,142,78,92,74,155,159,61,74,94,59,91,112,68,27,32,78,162,89,162,92,100,40,37,5,107,31,91,153,94,129,98,108,8,53,95,39,65,68,75,83,45,90,87,78,117,36,82,61,129,103,55,43,40,56,27,87,53,72,89,109,124,49,31,48,82,70,82,121,65,11,170,103,62,46,106,94,82,95,91,64,58,66,26,67,79,118,26,109,25,54,51,53,52,12,70,62,116,85,101,92,134,74,46,73,30,137,107,59,46,86,15,62,82,148,77,91,92,82,98],\"__ECDF\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[279]},\"__dummy_catlabel\":[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},\"selected\":{\"id\":\"1193\"},\"selection_policy\":{\"id\":\"1192\"}},\"id\":\"1116\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"children\":[[{\"id\":\"1003\"},0,0],[{\"id\":\"1043\"},0,1],[{\"id\":\"1083\"},1,0],[{\"id\":\"1123\"},1,1]]},\"id\":\"1207\",\"type\":\"GridBox\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.1},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Prdm14\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1079\",\"type\":\"Circle\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Rest\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1118\",\"type\":\"Circle\"},{\"attributes\":{\"bottom_units\":\"screen\",\"coordinates\":null,\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"group\":null,\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1148\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1130\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1090\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1128\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1176\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1088\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1092\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1126\",\"type\":\"DataRange1d\"},{\"attributes\":{\"coordinates\":null,\"group\":null,\"text\":\"Rest\"},\"id\":\"1084\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1177\",\"type\":\"AllLabels\"},{\"attributes\":{\"source\":{\"id\":\"1076\"}},\"id\":\"1082\",\"type\":\"CDSView\"},{\"attributes\":{\"axis\":{\"id\":\"1134\"},\"coordinates\":null,\"group\":null,\"ticker\":null},\"id\":\"1137\",\"type\":\"Grid\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Prdm14\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1078\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1179\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1145\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"1180\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1143\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"axis_label\":\"ECDF\",\"coordinates\":null,\"formatter\":{\"id\":\"1187\"},\"group\":null,\"major_label_policy\":{\"id\":\"1188\"},\"ticker\":{\"id\":\"1099\"}},\"id\":\"1098\",\"type\":\"LinearAxis\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.2},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.2},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Rest\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1120\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1135\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1187\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"axis_label\":\"mRNA count\",\"coordinates\":null,\"formatter\":{\"id\":\"1190\"},\"group\":null,\"major_label_policy\":{\"id\":\"1191\"},\"ticker\":{\"id\":\"1095\"}},\"id\":\"1094\",\"type\":\"LinearAxis\"},{\"attributes\":{\"axis\":{\"id\":\"1094\"},\"coordinates\":null,\"group\":null,\"ticker\":null},\"id\":\"1097\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1188\",\"type\":\"AllLabels\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.1},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Rest\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1119\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1165\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1190\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1191\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1169\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1198\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1199\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1192\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1201\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1193\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1202\",\"type\":\"AllLabels\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1156\"},\"glyph\":{\"id\":\"1158\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1160\"},\"nonselection_glyph\":{\"id\":\"1159\"},\"view\":{\"id\":\"1162\"}},\"id\":\"1161\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1166\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1055\",\"type\":\"BasicTicker\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.1},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Rex1\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1159\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1203\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1168\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1046\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1204\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1050\",\"type\":\"LinearScale\"},{\"attributes\":{\"source\":{\"id\":\"1156\"}},\"id\":\"1162\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1026\",\"type\":\"ResetTool\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.2},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.2},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Rex1\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1160\",\"type\":\"Circle\"},{\"attributes\":{\"below\":[{\"id\":\"1094\"}],\"center\":[{\"id\":\"1097\"},{\"id\":\"1101\"}],\"frame_height\":150,\"frame_width\":200,\"left\":[{\"id\":\"1098\"}],\"renderers\":[{\"id\":\"1121\"}],\"title\":{\"id\":\"1084\"},\"toolbar\":{\"id\":\"1109\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1086\"},\"x_scale\":{\"id\":\"1090\"},\"y_range\":{\"id\":\"1088\"},\"y_scale\":{\"id\":\"1092\"}},\"id\":\"1083\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"data\":{\"Rex1\":[11,172,261,178,129,97,16,29,118,133,152,8,125,172,245,265,202,291,14,40,56,160,120,52,239,11,151,76,122,290,98,170,218,171,131,89,32,8,214,219,172,353,331,235,209,8,297,239,192,238,124,163,148,151,40,205,331,218,150,61,76,128,11,166,96,362,160,247,204,266,98,145,61,136,111,15,80,250,169,155,6,163,174,227,69,221,167,174,155,195,38,135,244,98,182,10,191,131,255,288,137,238,103,131,166,17,284,264,86,8,260,81,19,121,9,126,8,6,110,194,118,122,122,159,23,12,163,192,302,157,62,206,104,140,129,126,160,140,258,30,99,6,98,170,254,9,11,154,145,11,90,203,186,144,68,166,94,186,201,113,176,18,156,31,173,166,108,245,191,113,72,157,51,147,108,11,420,190,151,153,198,154,48,11,95,23,134,326,124,105,233,217,3,94,144,47,177,241,54,102,142,204,89,81,124,7,265,100,204,102,116,142,210,140,29,155,6,90,96,142,281,118,5,116,271,19,321,226,201,8,17,179,289,25,262,227,194,98,130,116,42,79,15,193,276,143,93,242,32,153,111,53,47,6,252,78,205,217,215,13,191,116,132,125,63,186,97,100,54,137,4,158,166,180,195,144,67,120,280],\"__ECDF\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[279]},\"__dummy_catlabelindex\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},\"selected\":{\"id\":\"1204\"},\"selection_policy\":{\"id\":\"1203\"}},\"id\":\"1156\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"axis\":{\"id\":\"1014\"},\"coordinates\":null,\"group\":null,\"ticker\":null},\"id\":\"1017\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1171\",\"type\":\"Selection\"},{\"attributes\":{\"axis_label\":\"ECDF\",\"coordinates\":null,\"formatter\":{\"id\":\"1165\"},\"group\":null,\"major_label_policy\":{\"id\":\"1166\"},\"ticker\":{\"id\":\"1019\"}},\"id\":\"1018\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1015\",\"type\":\"BasicTicker\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Rex1\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1158\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1012\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1022\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1027\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1170\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1025\",\"type\":\"SaveTool\"},{\"attributes\":{\"overlay\":{\"id\":\"1028\"}},\"id\":\"1024\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1019\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1052\",\"type\":\"LinearScale\"},{\"attributes\":{\"coordinates\":null,\"group\":null,\"text\":\"Nanog\"},\"id\":\"1004\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1048\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1010\",\"type\":\"LinearScale\"},{\"attributes\":{\"axis_label\":\"mRNA count\",\"coordinates\":null,\"formatter\":{\"id\":\"1179\"},\"group\":null,\"major_label_policy\":{\"id\":\"1180\"},\"ticker\":{\"id\":\"1055\"}},\"id\":\"1054\",\"type\":\"LinearAxis\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Nanog\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1038\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1006\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1008\",\"type\":\"DataRange1d\"},{\"attributes\":{\"coordinates\":null,\"group\":null,\"text\":\"Prdm14\"},\"id\":\"1044\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1023\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"axis_label\":\"mRNA count\",\"coordinates\":null,\"formatter\":{\"id\":\"1168\"},\"group\":null,\"major_label_policy\":{\"id\":\"1169\"},\"ticker\":{\"id\":\"1015\"}},\"id\":\"1014\",\"type\":\"LinearAxis\"},{\"attributes\":{\"axis\":{\"id\":\"1018\"},\"coordinates\":null,\"dimension\":1,\"group\":null,\"ticker\":null},\"id\":\"1021\",\"type\":\"Grid\"},{\"attributes\":{\"tools\":[{\"id\":\"1022\"},{\"id\":\"1023\"},{\"id\":\"1024\"},{\"id\":\"1025\"},{\"id\":\"1026\"},{\"id\":\"1027\"}]},\"id\":\"1029\",\"type\":\"Toolbar\"}],\"root_ids\":[\"1210\"]},\"title\":\"Bokeh Application\",\"version\":\"2.4.2\"}};\n",
       "  const render_items = [{\"docid\":\"616a265d-1d4a-4277-99f0-8440d715d6cd\",\"root_ids\":[\"1210\"],\"roots\":{\"1210\":\"bb97d471-c15a-4eb7-94b4-5c8712c9a585\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    let attempts = 0;\n",
       "    const timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1210"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "genes = [\"Nanog\", \"Prdm14\", \"Rest\", \"Rex1\"]\n",
    "\n",
    "plots = [\n",
    "    iqplot.ecdf(\n",
    "        data=df[gene].values,\n",
    "        q=gene,\n",
    "        x_axis_label=\"mRNA count\",\n",
    "        title=gene,\n",
    "        frame_height=150,\n",
    "        frame_width=200,\n",
    "    )\n",
    "    for gene in genes\n",
    "]\n",
    "\n",
    "bokeh.io.show(bokeh.layouts.gridplot(plots, ncols=2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note the difference in the x-axis scales.  Clearly, *prdm14* has far fewer mRNA copies than the other genes. The presence of two inflection points in the Rex1 EDCF implies bimodality, leading us to suspect that there may be two cell types, or at least more than one cell type."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model for mRNA levels\n",
    "\n",
    "In this part of the lesson, we will model gene expression of each of the four genes separately, though they are connected by which cell is being measured. We will discuss that later. For now, we develop a model for the mRNA counts for a given gene.\n",
    "\n",
    "If gene expression is a purely Poisson process, we might expect a Poisson distribution. Or, if the copy number is itself somehow tightly regulated, we might expect a Normal distribution.\n",
    "\n",
    "Study of gene expression dynamics, largely through fluorescence imaging, has lead to a different story. Expression of many important genes can be **bursty**, which means that the promoter is on for a period of time in which transcripts are made, and then it is off for a while. The \"on\" periods are called \"bursts\" and are themselves well-modeled as a Poisson process. That is to say that the amount of time that a promoter is on is Exponentially distributed. Thus, we can think of a burst as a series of Bernoulli trials. A \"failure\" is production of an mRNA molecule, and a \"success\" is a switch to an off state. The number of \"successes\" we get is equal to the number of bursts we get per decay time of the mRNA. We can define the number of bursts before degradation of the mRNA as $\\alpha$. This is the so-called **burst frequency**. So, we have a series of Bernoulli trials and we wait for $\\alpha$ successes. Then, $n$, the total number of failures (which is the number of mRNA transcripts), is Negative Binomially distributed, since this matches the Negative Binomial story. Referring to the parametrization used in the [distribution explorer](https://distribution-explorer.github.io/discrete/negative_binomial.html),\n",
    "\n",
    "\\begin{align}\n",
    "n \\sim \\text{NBinom}(\\alpha, \\beta),\n",
    "\\end{align}\n",
    "\n",
    "where $\\beta$ is related to the probability $\\theta$ of a success of a Bernoulli trial by $\\theta = \\beta/(1+\\beta)$.\n",
    "\n",
    "The meaning of the parameter $\\beta$, and the related quantity $\\theta$, can be a little mystical here. We would like to relate it to the typical **burst size**, i.e., the typical number of transcripts made per burst. The size of a single given burst (that is, the number of transcripts made in a burst) is geometrically distributed (since it matches that story), so\n",
    "\n",
    "\\begin{align}\n",
    "f(n_\\mathrm{burst} ; \\theta) = (1-\\theta)^{n_\\mathrm{burst}}\\,\\theta.\n",
    "\\end{align}\n",
    "\n",
    "The mean number of transcripts $b$ in a burst is\n",
    "\n",
    "\\begin{align}\n",
    "b \\equiv \\left\\langle n_\\mathrm{burst}\\right\\rangle &= \\sum_{n_\\mathrm{burst}=0}^\\infty\n",
    "n_\\mathrm{burst}(1-\\theta)^{n_\\mathrm{burst}}\\theta\\\\[1em]\n",
    "&= \\theta \\sum_{n_\\mathrm{burst}=0}^\\infty\n",
    "n_\\mathrm{burst}(1-\\theta)^{n_\\mathrm{burst}} \\\\[1em]\n",
    "&= \\theta(1-\\theta)\\, \\frac{\\mathrm{d}}{\\mathrm{d}(1-\\theta)}\\sum_{n_\\mathrm{burst}=0}^\\infty(1-\\theta)^{n_\\mathrm{burst}} \\\\[1em]\n",
    "&= \\theta(1-\\theta)\\, \\frac{\\mathrm{d}}{\\mathrm{d}(1-\\theta)}\\,\\frac{1}{\\theta}\\\\[1em]\n",
    "&= -\\theta(1-\\theta)\\, \\frac{\\mathrm{d}}{\\mathrm{d}\\theta}\\,\\frac{1}{\\theta} \\\\[1em]\n",
    "&= \\frac{1-\\theta}{\\theta} \\\\[1em]\n",
    "&= \\frac{1}{\\beta}.\n",
    "\\end{align}\n",
    "\n",
    "So we now see that $1/\\beta$ is the typical burst size. Using the Negative Binomial property of mRNA copy numbers of bursty gene expression, we can characterize the expression levels of a given cell type by the two parameters of the Negative Binomial, the burst frequency $\\alpha$ and the burst size $b = 1/\\beta$. These are the two parameters we would like to infer from transcript count data. The conclusion of all this is that we have have our likelihood.\n",
    "\n",
    "\\begin{align}\n",
    "&n \\sim \\text{NBinom}(\\alpha, \\beta),\\\\[1em]\n",
    "&b = 1/\\beta.\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Maximum likelihood estimation by numerical optimization\n",
    "\n",
    "To compute the MLE for the two parameters, the burst frequency $\\alpha$ and burst size $\\beta$, we need to define the likelihood function. We make the assumption that the number of transcripts in each cell is i.i.d., giving a statistical model of\n",
    "\n",
    "\\begin{align}\n",
    "n_i \\sim \\text{NBinom}(\\alpha,\\beta)\\;\\forall i.\n",
    "\\end{align}\n",
    "\n",
    "Referring to the PMF of the Negative Binomial distribution and making the change of variables $b=1/\\beta$, the likelihood function is\n",
    "\n",
    "\\begin{align}\n",
    "L(\\alpha, b;\\mathbf{n}) = \\prod_i\\frac{\\Gamma(n_i+\\alpha)}{\\Gamma(\\alpha)n!}\\left(\\frac{1}{1+b}\\right)^\\alpha\\left(\\frac{b}{1+b}\\right)^{n_i},\n",
    "\\end{align}\n",
    "\n",
    "and the log-likelihood is \n",
    "\n",
    "\\begin{align}\n",
    "\\ell(\\alpha, b;\\mathbf{n}) = \\ln L(\\alpha, b;\\mathbf{n}) = \\sum_i \\ln \\left(\\frac{\\Gamma(n_i+\\alpha)}{\\Gamma(\\alpha)n!}\\left(\\frac{1}{1+b}\\right)^\\alpha\\left(\\frac{b}{1+b}\\right)^{n_i}\\right).\n",
    "\\end{align}\n",
    "\n",
    "To find the MLE, we need to find the values of $\\alpha$ and $b$ that satisfy\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{\\partial \\ell}{\\partial \\alpha} = \\frac{\\partial \\ell}{\\partial b} = 0.\n",
    "\\end{align}\n",
    "\n",
    "Unfortunately, no closed form solution exists for this. We therefore need to resort to [numerical optimization](https://en.wikipedia.org/wiki/Mathematical_optimization) to find the MLE $\\alpha^*$ and $b^*$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Numerical optimization\n",
    "\n",
    "Numerical optimization is typically implemented to find a *minimizers* of a function rather than maximizers. The function being minimized is called an **objective function**. This is not a problem for maximum likelihood estimation; we simply define a *negative* log-likelihood as our objective function.\n",
    "\n",
    "Sometimes, we have **constraints** on the allowed values for the parameters. In our case, both $\\alpha$ and $\\beta$ must be non-negative. So, the statement of the optimization problem to find the MLE is\n",
    "\n",
    "\\begin{align}\n",
    "\\text{minimize } (-\\ell(\\alpha, \\beta;\\mathbf{n})) \\text{ s.t. } \\alpha, \\beta > 0,\n",
    "\\end{align}\n",
    "\n",
    "where \"s.t.\" is read \"subject to.\" If we explicitly consider the constraints, we are performing a **constrained optimization problem**. Constrained optimization is often considerably more challenging than unconstrained optimization. There are ways around simple positivity constraints such as the ones here. We can instead define new variables $\\xi_\\alpha = \\ln \\alpha$ and $\\xi_b = \\ln b$, and write the log-likelihood in terms of these variables instead. We then find minimizing $\\xi_\\alpha$ and $\\xi_b$ and convert them to $\\alpha$ and $\\beta$ by exponentiation after performing the minimization calculation.\n",
    "\n",
    "Numerical optimization is implemented in the `scipy.optimize` submodule ([docs](https://docs.scipy.org/doc/scipy/reference/optimize.html)). Most of the functionality you need is in the `scipy.optimize.minimize()` function. To use the function to find minimizers of an objective function, the standard call signature is\n",
    "\n",
    "```python\n",
    "scipy.optimize.minimize(fun, x0, args=(), method='BFGS')\n",
    "```\n",
    "\n",
    "The `fun` argument is a function with call signature `fun(x, *args)`, where `x` is the variables used in the optimization. In the case of MLE, the function is the negative log-likelihood function, `x` is always an array of the parameter values we are trying to estimate, and the remaining arguments are additional arguments passed into the likelihood function, which always include the measured data. Importantly, we have to provide a guess as to which values of the parameters are optimal. This is passed as an array `x0`. The kwarg `args` specifies which additional arguments are to be passed to `fun()`. **Note that** `args` **must be a tuple**. Finally, the `method` keyword argument specifies which numerical optimization method to use, the default being the [Broyden–Fletcher–Goldfarb–Shanno algorithm](https://en.wikipedia.org/wiki/Broyden–Fletcher–Goldfarb–Shanno_algorithm). This is a good algorithm but does compute derivatives, so it is only useful if the parameter values can take on any real value.\n",
    "\n",
    "I have omitted the `bounds` keyword argument here because we will not usually use them, as we will either do the logarithm trick above, or use [Powell's method](https://en.wikipedia.org/wiki/Powell%27s_method), which does not required calculation of derivatives (so we may therefore have discontinuities in the objective function and set the value of the objective function to be infinity for disallowed parameter values)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Solving with the BFGS algorithm\n",
    "\n",
    "We will now solve the minimization problem using the BFGS algorithm, specifying the parameters using logarithms to make sure that the problem is completely unconstrained. First, we have to write a function for the log-likelihood matching the required function signature of the input `fun` to `scipy.optimize.minimize()`. Note that we do not have to hand-code the log-likelihood. The `scipy.stats` module has functions to compute the log-PDF/log-PMF for many distributions. We just need to check the [distribution explorer](https://distribution-explorer.github.io/) to ensure we use the parametrization that the `scipy.stats` module requires. In this case, it expects parameters `alpha` and `1/1+b`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def log_like_iid_nbinom_log_params(log_params, n):\n",
    "    \"\"\"Log likelihood for i.i.d. NBinom measurements with \n",
    "    input being logarithm of parameters.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    log_params : array\n",
    "        Logarithm of the parameters alpha and b.\n",
    "    n : array\n",
    "        Array of counts.\n",
    "        \n",
    "    Returns\n",
    "    -------\n",
    "    output : float\n",
    "        Log-likelihood.    \n",
    "    \"\"\"\n",
    "    log_alpha, log_b = log_params\n",
    "\n",
    "    # Convert from log parameters\n",
    "    alpha = np.exp(log_alpha)\n",
    "    b = np.exp(log_b)\n",
    "\n",
    "    return np.sum(st.nbinom.logpmf(n, alpha, 1/(1+b)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the log likelihood specified, we simply use `-log_like_iid_nbinom_params()` as our objective function, which we can succinctly code up as an anonymous (lambda) function. I do not have \n",
    "a good guess in mind, so I will just start with both parameters being about three, so their logarithms are about one. Let's perform the optimization for the *nanog* gene and look at the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: 1524.9284357728939\n",
       " hess_inv: array([[ 0.00201009, -0.00068819],\n",
       "       [-0.00068819,  0.00255942]])\n",
       "      jac: array([0., 0.])\n",
       "  message: 'Optimization terminated successfully.'\n",
       "     nfev: 69\n",
       "      nit: 17\n",
       "     njev: 23\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([0.233833  , 4.24052605])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract the values for Nanog\n",
    "n = df['Nanog'].values\n",
    "\n",
    "res = scipy.optimize.minimize(\n",
    "    fun=lambda log_params, n: -log_like_iid_nbinom_log_params(log_params, n),\n",
    "    x0=np.array([1, 1]),\n",
    "    args=(n,),\n",
    "    method='BFGS'\n",
    ")\n",
    "\n",
    "res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The result returned by `scipy.optimize.minimize()` is an `OptimizeResult` object that has several attributes about how the optimization calculation went, including if it was successful. Importantly, the optimal log-parameter values are in the array `x`. We can extract them and exponentiate them to get the MLE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "α:  1.263433475874493\n",
      "b:  69.444373557454\n"
     ]
    }
   ],
   "source": [
    "alpha_mle, b_mle = np.exp(res.x)\n",
    "\n",
    "print(\"α: \", alpha_mle)\n",
    "print(\"b: \", b_mle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, the MLE for the burst frequency is about 1.25 inverse degradation times. The MLE for the burst size is about 70 transcripts per burst."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Solving using Powell's method\n",
    "\n",
    "As an alternative to the BFGS method, we can use Powell's method. This has the advantage that we do not have to use derivatives in the optimization, so we do not have to use logarithms of the parameters. We do, however, need to specify that the log-likelihood is minus infinity for disallowed parameter values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def log_like_iid_nbinom(params, n):\n",
    "    \"\"\"Log likelihood for i.i.d. NBinom measurements.\"\"\"\n",
    "    alpha, b = params\n",
    "    \n",
    "    if alpha <= 0 or b <= 0:\n",
    "        return -np.inf\n",
    "\n",
    "    return np.sum(st.nbinom.logpmf(n, alpha, 1/(1+b)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take a similar approach to solving using Powell's method. This time, we will catch warnings because the solver will stumble into regions where the log-likelihood is minus infinity. We know this to be the case, as we designed it that way, so we will suppress the warnings to keep our notebook clean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "α:  1.263097372292775\n",
      "b:  69.34784233505958\n"
     ]
    }
   ],
   "source": [
    "with warnings.catch_warnings():\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "    \n",
    "    res = scipy.optimize.minimize(\n",
    "        fun=lambda params, n: -log_like_iid_nbinom(params, n),\n",
    "        x0=np.array([3, 3]),\n",
    "        args=(n,),\n",
    "        method='Powell'\n",
    "    )\n",
    "\n",
    "if res.success:\n",
    "    alpha_mle, b_mle = res.x\n",
    "else:\n",
    "    raise RuntimeError('Convergence failed with message', res.message)\n",
    "    \n",
    "print(\"α: \", alpha_mle)\n",
    "print(\"b: \", b_mle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This differs from the result we got with BFGS in the third or fourth decimal place, due to inaccuracies in introducing the logarithms, but the difference is not big and also is small compared to the confidence interval we will momentarily compute for the MLEs of *α* and *b*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The likelihood function\n",
    "\n",
    "To help give a picture of what the likelihood function looks like, and what the optimizer is doing, we can plot it. In this case, we have two parameters, so we can make plot of the likelihood as a colored image. We first compute the log-likelihood for various values of $\\alpha$ and $b$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# alpha and b values for plotting\n",
    "alpha = np.linspace(1, 1.5, 100)\n",
    "b = np.linspace(50, 90, 100)\n",
    "\n",
    "# Compute log-likelihood for each value\n",
    "log_like = np.empty((100, 100))\n",
    "for j, alpha_val in enumerate(alpha):\n",
    "    for i, b_val in enumerate(b):\n",
    "        log_like[i, j] = log_like_iid_nbinom((alpha_val, b_val), n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember that the likelihood function is not a probability distribution, so it is not normalized. When we exponentiate the log-likelihood, we may get values close to zero, or very large. It is therefore a good idea to first subtract the maximal value of all computed log-likelihoods. This has the effect of multiplying the likelihood function by a constant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "like = np.exp(log_like - log_like.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can make the plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"5b7b1e57-7bcf-4f39-9938-9771a9a8f532\" data-root-id=\"1451\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  const docs_json = {\"931b788f-1d1a-4d96-b1e2-58df35cb7e99\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1460\"}],\"center\":[{\"id\":\"1463\"},{\"id\":\"1467\"}],\"frame_height\":300,\"frame_width\":300,\"left\":[{\"id\":\"1464\"}],\"renderers\":[{\"id\":\"1490\"}],\"title\":{\"id\":\"1532\"},\"toolbar\":{\"id\":\"1475\"},\"x_range\":{\"id\":\"1452\"},\"x_scale\":{\"id\":\"1456\"},\"y_range\":{\"id\":\"1454\"},\"y_scale\":{\"id\":\"1458\"}},\"id\":\"1451\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"color_mapper\":{\"id\":\"1482\"},\"dh\":{\"value\":40.0},\"dw\":{\"value\":0.5},\"global_alpha\":{\"value\":0.2},\"image\":{\"field\":\"image\"},\"x\":{\"value\":1.0},\"y\":{\"value\":50.0}},\"id\":\"1488\",\"type\":\"Image\"},{\"attributes\":{\"palette\":[\"#440154\",\"#440255\",\"#440357\",\"#450558\",\"#45065A\",\"#45085B\",\"#46095C\",\"#460B5E\",\"#460C5F\",\"#460E61\",\"#470F62\",\"#471163\",\"#471265\",\"#471466\",\"#471567\",\"#471669\",\"#47186A\",\"#48196B\",\"#481A6C\",\"#481C6E\",\"#481D6F\",\"#481E70\",\"#482071\",\"#482172\",\"#482273\",\"#482374\",\"#472575\",\"#472676\",\"#472777\",\"#472878\",\"#472A79\",\"#472B7A\",\"#472C7B\",\"#462D7C\",\"#462F7C\",\"#46307D\",\"#46317E\",\"#45327F\",\"#45347F\",\"#453580\",\"#453681\",\"#443781\",\"#443982\",\"#433A83\",\"#433B83\",\"#433C84\",\"#423D84\",\"#423E85\",\"#424085\",\"#414186\",\"#414286\",\"#404387\",\"#404487\",\"#3F4587\",\"#3F4788\",\"#3E4888\",\"#3E4989\",\"#3D4A89\",\"#3D4B89\",\"#3D4C89\",\"#3C4D8A\",\"#3C4E8A\",\"#3B508A\",\"#3B518A\",\"#3A528B\",\"#3A538B\",\"#39548B\",\"#39558B\",\"#38568B\",\"#38578C\",\"#37588C\",\"#37598C\",\"#365A8C\",\"#365B8C\",\"#355C8C\",\"#355D8C\",\"#345E8D\",\"#345F8D\",\"#33608D\",\"#33618D\",\"#32628D\",\"#32638D\",\"#31648D\",\"#31658D\",\"#31668D\",\"#30678D\",\"#30688D\",\"#2F698D\",\"#2F6A8D\",\"#2E6B8E\",\"#2E6C8E\",\"#2E6D8E\",\"#2D6E8E\",\"#2D6F8E\",\"#2C708E\",\"#2C718E\",\"#2C728E\",\"#2B738E\",\"#2B748E\",\"#2A758E\",\"#2A768E\",\"#2A778E\",\"#29788E\",\"#29798E\",\"#287A8E\",\"#287A8E\",\"#287B8E\",\"#277C8E\",\"#277D8E\",\"#277E8E\",\"#267F8E\",\"#26808E\",\"#26818E\",\"#25828E\",\"#25838D\",\"#24848D\",\"#24858D\",\"#24868D\",\"#23878D\",\"#23888D\",\"#23898D\",\"#22898D\",\"#228A8D\",\"#228B8D\",\"#218C8D\",\"#218D8C\",\"#218E8C\",\"#208F8C\",\"#20908C\",\"#20918C\",\"#1F928C\",\"#1F938B\",\"#1F948B\",\"#1F958B\",\"#1F968B\",\"#1E978A\",\"#1E988A\",\"#1E998A\",\"#1E998A\",\"#1E9A89\",\"#1E9B89\",\"#1E9C89\",\"#1E9D88\",\"#1E9E88\",\"#1E9F88\",\"#1EA087\",\"#1FA187\",\"#1FA286\",\"#1FA386\",\"#20A485\",\"#20A585\",\"#21A685\",\"#21A784\",\"#22A784\",\"#23A883\",\"#23A982\",\"#24AA82\",\"#25AB81\",\"#26AC81\",\"#27AD80\",\"#28AE7F\",\"#29AF7F\",\"#2AB07E\",\"#2BB17D\",\"#2CB17D\",\"#2EB27C\",\"#2FB37B\",\"#30B47A\",\"#32B57A\",\"#33B679\",\"#35B778\",\"#36B877\",\"#38B976\",\"#39B976\",\"#3BBA75\",\"#3DBB74\",\"#3EBC73\",\"#40BD72\",\"#42BE71\",\"#44BE70\",\"#45BF6F\",\"#47C06E\",\"#49C16D\",\"#4BC26C\",\"#4DC26B\",\"#4FC369\",\"#51C468\",\"#53C567\",\"#55C666\",\"#57C665\",\"#59C764\",\"#5BC862\",\"#5EC961\",\"#60C960\",\"#62CA5F\",\"#64CB5D\",\"#67CC5C\",\"#69CC5B\",\"#6BCD59\",\"#6DCE58\",\"#70CE56\",\"#72CF55\",\"#74D054\",\"#77D052\",\"#79D151\",\"#7CD24F\",\"#7ED24E\",\"#81D34C\",\"#83D34B\",\"#86D449\",\"#88D547\",\"#8BD546\",\"#8DD644\",\"#90D643\",\"#92D741\",\"#95D73F\",\"#97D83E\",\"#9AD83C\",\"#9DD93A\",\"#9FD938\",\"#A2DA37\",\"#A5DA35\",\"#A7DB33\",\"#AADB32\",\"#ADDC30\",\"#AFDC2E\",\"#B2DD2C\",\"#B5DD2B\",\"#B7DD29\",\"#BADE27\",\"#BDDE26\",\"#BFDF24\",\"#C2DF22\",\"#C5DF21\",\"#C7E01F\",\"#CAE01E\",\"#CDE01D\",\"#CFE11C\",\"#D2E11B\",\"#D4E11A\",\"#D7E219\",\"#DAE218\",\"#DCE218\",\"#DFE318\",\"#E1E318\",\"#E4E318\",\"#E7E419\",\"#E9E419\",\"#ECE41A\",\"#EEE51B\",\"#F1E51C\",\"#F3E51E\",\"#F6E61F\",\"#F8E621\",\"#FAE622\",\"#FDE724\"]},\"id\":\"1482\",\"type\":\"LinearColorMapper\"},{\"attributes\":{},\"id\":\"1541\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1538\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"end\":1.5,\"start\":1.0},\"id\":\"1452\",\"type\":\"Range1d\"},{\"attributes\":{\"color_mapper\":{\"id\":\"1482\"},\"dh\":{\"value\":40.0},\"dw\":{\"value\":0.5},\"image\":{\"field\":\"image\"},\"x\":{\"value\":1.0},\"y\":{\"value\":50.0}},\"id\":\"1484\",\"type\":\"Image\"},{\"attributes\":{\"bottom_units\":\"screen\",\"coordinates\":null,\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"group\":null,\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1474\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1465\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1473\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1458\",\"type\":\"LinearScale\"},{\"attributes\":{\"coordinates\":null,\"group\":null},\"id\":\"1532\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1468\",\"type\":\"PanTool\"},{\"attributes\":{\"color_mapper\":{\"id\":\"1482\"},\"dh\":{\"value\":40.0},\"dw\":{\"value\":0.5},\"global_alpha\":{\"value\":0.1},\"image\":{\"field\":\"image\"},\"x\":{\"value\":1.0},\"y\":{\"value\":50.0}},\"id\":\"1486\",\"type\":\"Image\"},{\"attributes\":{\"overlay\":{\"id\":\"1474\"}},\"id\":\"1470\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1471\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"1472\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1536\",\"type\":\"AllLabels\"},{\"attributes\":{\"data\":{\"image\":[{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[100,100]}]},\"selected\":{\"id\":\"1541\"},\"selection_policy\":{\"id\":\"1540\"}},\"id\":\"1483\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"end\":90.0,\"start\":50.0},\"id\":\"1454\",\"type\":\"Range1d\"},{\"attributes\":{\"tools\":[{\"id\":\"1468\"},{\"id\":\"1469\"},{\"id\":\"1470\"},{\"id\":\"1471\"},{\"id\":\"1472\"},{\"id\":\"1473\"}]},\"id\":\"1475\",\"type\":\"Toolbar\"},{\"attributes\":{\"axis_label\":\"b\",\"coordinates\":null,\"formatter\":{\"id\":\"1535\"},\"group\":null,\"major_label_policy\":{\"id\":\"1536\"},\"ticker\":{\"id\":\"1465\"}},\"id\":\"1464\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1456\",\"type\":\"LinearScale\"},{\"attributes\":{\"axis_label\":\"\\u03b1\",\"coordinates\":null,\"formatter\":{\"id\":\"1538\"},\"group\":null,\"major_label_policy\":{\"id\":\"1539\"},\"ticker\":{\"id\":\"1461\"}},\"id\":\"1460\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1461\",\"type\":\"BasicTicker\"},{\"attributes\":{\"axis\":{\"id\":\"1460\"},\"coordinates\":null,\"group\":null,\"ticker\":null},\"id\":\"1463\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1535\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"axis\":{\"id\":\"1464\"},\"coordinates\":null,\"dimension\":1,\"group\":null,\"ticker\":null},\"id\":\"1467\",\"type\":\"Grid\"},{\"attributes\":{\"source\":{\"id\":\"1483\"}},\"id\":\"1491\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1469\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1540\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1483\"},\"glyph\":{\"id\":\"1484\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1488\"},\"nonselection_glyph\":{\"id\":\"1486\"},\"view\":{\"id\":\"1491\"}},\"id\":\"1490\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1539\",\"type\":\"AllLabels\"}],\"root_ids\":[\"1451\"]},\"title\":\"Bokeh Application\",\"version\":\"2.4.2\"}};\n",
       "  const render_items = [{\"docid\":\"931b788f-1d1a-4d96-b1e2-58df35cb7e99\",\"root_ids\":[\"1451\"],\"roots\":{\"1451\":\"5b7b1e57-7bcf-4f39-9938-9771a9a8f532\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    let attempts = 0;\n",
       "    const timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1451"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = bokeh.plotting.figure(\n",
    "    frame_height=300,\n",
    "    frame_width=300,\n",
    "    x_axis_label=\"α\",\n",
    "    y_axis_label=\"b\",\n",
    "    x_range=[np.min(alpha), np.max(alpha)],\n",
    "    y_range=[np.min(b), np.max(b)],\n",
    ")\n",
    "\n",
    "p.image(\n",
    "    image=[like],\n",
    "    x=np.min(alpha),\n",
    "    y=np.min(b),\n",
    "    dw=np.max(alpha) - np.min(alpha),\n",
    "    dh=np.max(b) - np.min(b),\n",
    "    color_mapper=bokeh.models.LinearColorMapper(bokeh.palettes.viridis(256)),\n",
    ")\n",
    "\n",
    "bokeh.io.show(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Graphically, we can see that we appropriately found the maximum."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A quick visualization\n",
    "\n",
    "We can do a quick visualization of our MLE to see if the model holds up. We will talk more about graphical tests of model predictive accuracy in coming lessons, but for now, we will simply overlay the theoretical CDF parametrized by the MLE. We can conveniently use the `scipy.stats` module to generate the CDF. It is probably overkill, since we have such a wide range of mRNA counts, but we will take care to make sure we plot the theoretical CDF as a staircase, since it is for a discrete distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"64f0d0dc-84aa-4029-af7c-a9a44e099a90\" data-root-id=\"1598\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  const docs_json = {\"e72c0834-41fe-4f28-9965-ef1cc83f09ab\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1607\"}],\"center\":[{\"id\":\"1610\"},{\"id\":\"1614\"}],\"frame_height\":275,\"frame_width\":375,\"left\":[{\"id\":\"1611\"}],\"renderers\":[{\"id\":\"1633\"},{\"id\":\"1640\"},{\"id\":\"1646\"}],\"title\":{\"id\":\"1699\"},\"toolbar\":{\"id\":\"1622\"},\"toolbar_location\":\"above\",\"x_range\":{\"id\":\"1599\"},\"x_scale\":{\"id\":\"1603\"},\"y_range\":{\"id\":\"1601\"},\"y_scale\":{\"id\":\"1605\"}},\"id\":\"1598\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"source\":{\"id\":\"1642\"}},\"id\":\"1647\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1618\",\"type\":\"SaveTool\"},{\"attributes\":{\"coordinates\":null,\"group\":null},\"id\":\"1699\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1605\",\"type\":\"LinearScale\"},{\"attributes\":{\"axis\":{\"id\":\"1611\"},\"coordinates\":null,\"dimension\":1,\"group\":null,\"ticker\":null},\"id\":\"1614\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1619\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1707\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1603\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1711\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"orange\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1644\",\"type\":\"Line\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1642\"},\"glyph\":{\"id\":\"1643\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1645\"},\"nonselection_glyph\":{\"id\":\"1644\"},\"view\":{\"id\":\"1647\"}},\"id\":\"1646\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1712\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1708\",\"type\":\"Selection\"},{\"attributes\":{\"bottom_units\":\"screen\",\"coordinates\":null,\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"group\":null,\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1621\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"tools\":[{\"id\":\"1615\"},{\"id\":\"1616\"},{\"id\":\"1617\"},{\"id\":\"1618\"},{\"id\":\"1619\"},{\"id\":\"1620\"}]},\"id\":\"1622\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1702\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1706\",\"type\":\"AllLabels\"},{\"attributes\":{\"fill_alpha\":0.5,\"fill_color\":\"#1f77b3\",\"line_alpha\":0,\"line_color\":\"#1f77b4\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1630\",\"type\":\"Patch\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.1},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Nanog\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1638\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1616\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"fill_alpha\":0.1,\"fill_color\":\"#1f77b3\",\"hatch_alpha\":0.1,\"line_alpha\":0.1,\"line_color\":\"#1f77b4\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1631\",\"type\":\"Patch\"},{\"attributes\":{},\"id\":\"1608\",\"type\":\"BasicTicker\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1635\"},\"glyph\":{\"id\":\"1637\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1639\"},\"nonselection_glyph\":{\"id\":\"1638\"},\"view\":{\"id\":\"1641\"}},\"id\":\"1640\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"fill_alpha\":0.2,\"fill_color\":\"#1f77b3\",\"hatch_alpha\":0.2,\"line_alpha\":0.2,\"line_color\":\"#1f77b4\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1632\",\"type\":\"Patch\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.2},\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_alpha\":{\"value\":0.2},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_alpha\":{\"value\":0.2},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Nanog\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1639\",\"type\":\"Circle\"},{\"attributes\":{\"source\":{\"id\":\"1635\"}},\"id\":\"1641\",\"type\":\"CDSView\"},{\"attributes\":{\"axis_label\":\"Nanog\",\"coordinates\":null,\"formatter\":{\"id\":\"1705\"},\"group\":null,\"major_label_policy\":{\"id\":\"1706\"},\"ticker\":{\"id\":\"1608\"}},\"id\":\"1607\",\"type\":\"LinearAxis\"},{\"attributes\":{\"line_alpha\":0.2,\"line_color\":\"orange\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1645\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1615\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1703\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1709\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"axis_label\":\"ECDF\",\"coordinates\":null,\"formatter\":{\"id\":\"1702\"},\"group\":null,\"major_label_policy\":{\"id\":\"1703\"},\"ticker\":{\"id\":\"1612\"}},\"id\":\"1611\",\"type\":\"LinearAxis\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1116]},\"y\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1116]}},\"selected\":{\"id\":\"1708\"},\"selection_policy\":{\"id\":\"1707\"}},\"id\":\"1629\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1620\",\"type\":\"HelpTool\"},{\"attributes\":{\"overlay\":{\"id\":\"1621\"}},\"id\":\"1617\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1710\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1601\",\"type\":\"DataRange1d\"},{\"attributes\":{\"data\":{\"Nanog\":[39,33,68,88,41,103,27,15,153,127,73,5,64,104,202,216,51,293,4,1,5,143,77,27,156,0,100,101,33,120,101,57,97,121,228,79,48,0,34,107,110,408,231,153,138,10,137,69,174,61,32,84,67,141,24,94,246,80,69,11,20,10,13,44,68,251,127,74,156,44,61,33,39,175,128,24,67,274,78,49,4,143,193,82,10,176,86,107,130,149,31,40,177,37,145,1,86,113,115,139,68,83,64,94,117,26,108,120,84,2,144,62,55,12,21,39,33,14,103,78,82,46,47,79,1,6,24,116,104,63,59,132,125,153,85,104,52,140,128,22,35,2,162,236,140,14,3,132,120,30,84,200,74,154,81,77,59,88,80,10,175,19,124,60,87,194,29,119,67,8,38,94,28,22,66,6,90,77,92,118,171,29,32,11,77,37,198,134,14,227,190,40,1,50,65,19,64,154,65,25,71,129,114,123,156,8,132,136,80,162,53,87,72,64,19,134,10,65,109,96,105,21,20,116,239,0,83,263,67,0,29,66,191,30,196,49,186,181,104,127,66,11,19,155,252,160,38,41,6,195,55,24,94,11,66,73,263,168,128,18,58,72,105,118,23,212,76,32,29,104,2,76,148,187,141,3,8,74,104],\"__ECDF\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[279]},\"__dummy_catlabelindex\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},\"selected\":{\"id\":\"1710\"},\"selection_policy\":{\"id\":\"1709\"}},\"id\":\"1635\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"line_color\":\"orange\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1643\",\"type\":\"Line\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[818]},\"y\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[818]}},\"selected\":{\"id\":\"1712\"},\"selection_policy\":{\"id\":\"1711\"}},\"id\":\"1642\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b3\"},\"hatch_color\":{\"value\":\"#1f77b3\"},\"line_color\":{\"value\":\"#1f77b3\"},\"x\":{\"field\":\"Nanog\"},\"y\":{\"field\":\"__ECDF\"}},\"id\":\"1637\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1599\",\"type\":\"DataRange1d\"},{\"attributes\":{\"coordinates\":null,\"data_source\":{\"id\":\"1629\"},\"glyph\":{\"id\":\"1630\"},\"group\":null,\"hover_glyph\":null,\"muted_glyph\":{\"id\":\"1632\"},\"nonselection_glyph\":{\"id\":\"1631\"},\"view\":{\"id\":\"1634\"}},\"id\":\"1633\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"axis\":{\"id\":\"1607\"},\"coordinates\":null,\"group\":null,\"ticker\":null},\"id\":\"1610\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1705\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1612\",\"type\":\"BasicTicker\"},{\"attributes\":{\"source\":{\"id\":\"1629\"}},\"id\":\"1634\",\"type\":\"CDSView\"}],\"root_ids\":[\"1598\"]},\"title\":\"Bokeh Application\",\"version\":\"2.4.2\"}};\n",
       "  const render_items = [{\"docid\":\"e72c0834-41fe-4f28-9965-ef1cc83f09ab\",\"root_ids\":[\"1598\"],\"roots\":{\"1598\":\"64f0d0dc-84aa-4029-af7c-a9a44e099a90\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    let attempts = 0;\n",
       "    const timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1598"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = iqplot.ecdf(data=df['Nanog'].values, q='Nanog', conf_int=True)\n",
    "n_theor = np.arange(0, df['Nanog'].max()+1)\n",
    "cdf_theor = st.nbinom.cdf(n_theor, alpha_mle, 1/(1+b_mle))\n",
    "\n",
    "# Weave together to make staircase for discrete distribution\n",
    "n_plot = np.empty(2 * len(n_theor))\n",
    "cdf_plot = np.empty(2 * len(n_theor))\n",
    "cdf_plot[0] = 0\n",
    "cdf_plot[1::2] = cdf_theor\n",
    "cdf_plot[2::2] = cdf_theor[:-1]\n",
    "n_plot[::2] = n_theor\n",
    "n_plot[1::2] = n_theor\n",
    "\n",
    "p.line(n_plot, cdf_plot, line_color='orange', line_width=2)\n",
    "bokeh.io.show(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The MLE curve deviates from the nonparametric ECDF 95% confidence interval. This suggests we may be missing something in our model. We will cover this in more depth in future lessons."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Computing environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python implementation: CPython\n",
      "Python version       : 3.9.12\n",
      "IPython version      : 8.2.0\n",
      "\n",
      "numpy     : 1.21.5\n",
      "scipy     : 1.7.3\n",
      "pandas    : 1.4.2\n",
      "bokeh     : 2.4.2\n",
      "iqplot    : 0.2.5\n",
      "jupyterlab: 3.3.2\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%load_ext watermark\n",
    "%watermark -v -p numpy,scipy,pandas,bokeh,iqplot,jupyterlab"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
